cameras:
    camera1:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .5
        ambient: .2
    light2:
        type: point
        position: [0, 0, 500px]
        origin: ground
        ambient: .3
        diffuse: .5
        specular: .2

styles:
    rock:
        extends: polygons
        material:
            normal:
                texture: /doc/procedural/rock.jpg
                mapping: uv
            ambient: 0.8
            diffuse: 1
            specular: 0
        shaders:
            transforms:
                globals: |
                    mat2 rotate2d(float _angle){
                        return mat2(cos(_angle),-sin(_angle),
                                    sin(_angle),cos(_angle));
                    }

                    float random (in vec2 _st) { 
                        return fract(sin(dot(_st.xy,
                                             vec2(12.9898,78.233)))* 
                            43758.5453123);
                    }

                    float noise (in vec2 _st) {
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);

                        // Four corners in 2D of a tile
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));

                        vec2 u = f * f * (3.0 - 2.0 * f);

                        return mix(a, b, u.x) + 
                                (c - a)* u.y * (1.0 - u.x) + 
                                (d - b) * u.x * u.y;
                    }

                    float random (in float _x) {
                        return fract(sin(_x)*1e4);
                    }

                    float noise (in float _x) {
                        float i = floor(_x);
                        float f = fract(_x);
                        float u = f * f * (3.0 - 2.0 * f);
                        return mix(random(i), random(i + 1.0), u);
                    }

                    float getBrightness(in vec3 _rgb){
                        return 0.212655 * _rgb.r + 0.715158 * _rgb.g + 0.072187 * _rgb.b;
                    }

                    float getCrossHatch(in vec2 _pos, float _angle, float _brigtness){
                        float scale = 20.0;
                        _pos *= scale;
                        _pos = rotate2d( _angle ) * _pos;
                        return 1.0-smoothstep(-1.+_brigtness*2.0,1.,abs(sin(_pos.x*3.1415)));
                    }
                # normal: |
                #     vec3 pct = step(vec3(0.1),fract(v_world_position.xyz*0.2));
                #     normal = mix(normal,v_normal,max(pct.x+pct.y+pct.z,1.0) );
                color: |
                    float b = getBrightness(g_light_accumulator_diffuse.rgb);
                    vec3 pos = v_world_position.xyz*0.01;

                    float pattern = getCrossHatch( pos.xy+noise(pos.xz)*2.0, 0.2,b );

                    color.rgb *= vec3( mix( vec3(0.282,0.133,0.063), vec3(0.4, 0.3, 0.2) ,  pattern) );
                    color.rgb = mix(vec3(0.2,0.15,0.1),color.rgb,smoothstep(0.0,0.2,pattern));
                    color.rgb = mix(color.rgb,vec3(0.878,0.651,0.471),smoothstep(0.8,1.0,pattern))*1.2;


sources:
    osm:
        type: GeoJSONTileSource
        url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json

layers:
    earth:
        geometry:
            source: osm
            filter: earth
        style:
            order: 0
            color: '#ddeeee'
    landuse:
        geometry:
            source: osm
            filter: landuse
        style:
            order: 1
            color: '#aaffaa'
            interactive: true

    water:
        geometry:
            source: osm
            filter: water
        style:
            order: 2
            color: '#88bbee'

    roads:
        geometry:
            source: osm
            filter: roads
        style:
            order: 3
            color: gray    
            width: 8
        highway:
            filter:
                kind: highway
            style:
                color: '#cc6666'
                width: 12
                outline:
                    color: grey
                    width: 3
        tunnel:
            filter:
                is_tunnel: yes
            style:
                color: tan
            rail:
                filter:
                    kind: rail
                style:
                    width: 0
        minor_road:
            filter:
                kind: minor_road
            style:
                color: lightgrey
                width: 5
        path:
            filter:
                kind: path
            style:
                color: [0.8, 0.8, 0.8]
                width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            style:
                color: pink
                width: 3
    
    buildings:
        geometry:
            source: osm
            filter: buildings
        style:
            name: rock
            order: 4
            color: |
                function () {
                    var h = feature.height || 20;
                    h = Math.min((h + 50)/ 250, .8);
                    h = Math.max(h, .4);
                    return [h, h, h];
                }
            extrude: true